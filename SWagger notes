

All Possible Options in swaggerUi.setup(swaggerSpec, options) (with Simple Explanations)
Here are the commonly used UI options you can pass:

Option	Type	Description
explorer	boolean	Shows the "Explore" bar to let users enter their own Swagger spec URL
swaggerOptions	object	Configuration passed to the Swagger UI directly (like filtering, default models expansion)
customCss	string	Add custom CSS styles to the Swagger UI
customCssUrl	string	Load external CSS file
customJs	string	Load external JavaScript file
customfavIcon	string	Set a custom favicon for the Swagger UI page
customSiteTitle	string	Set a custom title for the Swagger UI HTML page
html	string	Replace the full Swagger UI HTML
req, res	object	Request/response objects for customizing UI per request (rarely used)

ðŸ”§ swaggerOptions Sub-options
This is a key field: you can pass options under swaggerOptions to control Swagger UI behavior.

Sub-option	Type	Description
defaultModelsExpandDepth	number	Number of levels to expand models by default (use -1 to hide models)
defaultModelExpandDepth	number	Controls how deeply nested models show up
defaultModelRendering	'example' or 'model'	Whether to show example values or model structure
docExpansion	'none', 'list', 'full'	Controls how endpoints are initially expanded
filter	boolean or string	Show filter box for operations (can filter by tag or method)
showExtensions	boolean	Show vendor-specific extensions (like x-*)
showCommonExtensions	boolean	Show extensions that are common in OpenAPI
displayRequestDuration	boolean	Show how long requests take
tryItOutEnabled	boolean	Enable/disable the "Try it out" feature
supportedSubmitMethods	array	What HTTP methods are allowed to "Try it out" (e.g., ['get', 'post'])
validatorUrl	string or null	Set to null to disable validator URL
persistAuthorization	boolean	Keep authorization token after page refresh
layout	'BaseLayout' or 'StandaloneLayout'	Choose Swagger layout
syntaxHighlight	object	Controls code syntax highlighting colors and theme


swaggerUi.setup(swaggerSpec, {
  explorer: true,
  customSiteTitle: 'My API Docs',
  customfavIcon: '/favicon.ico',
  customCss: '.swagger-ui .topbar { display: none }',
  swaggerOptions: {
    docExpansion: 'none',
    defaultModelsExpandDepth: -1,
    tryItOutEnabled: true,
    displayRequestDuration: true,
    persistAuthorization: true,
    supportedSubmitMethods: ['get', 'post'],
  }
});


============================================================= >
Swagger in Fastify :

For @fastify/swagger-ui: Full List of Options (with explanations)
These options are used when registering @fastify/swagger-ui with Fastify:


fastify.register(require('@fastify/swagger-ui'), {
  routePrefix: '/docs',
  staticCSP: true,
  exposeRoute: true,
  uiConfig: {
    docExpansion: "list",        // expands tag list by default
    deepLinking: true,           // enable anchor links to individual operations
    displayRequestDuration: true,// shows request duration
    tryItOutEnabled: true,       // enables "Try it out" for APIs
    filter: true,                // enables filtering API endpoints
    showExtensions: true,        // shows x-* vendor extensions
    showCommonExtensions: true,  // shows common vendor extensions
    persistAuthorization: true,  // remember bearer token on reload
  },
  uiHooks: {
    onRequest: (request, reply, next) => next(), // custom middleware for docs route
    preHandler: (request, reply, next) => next()
  },
  theme: {
    title: 'Custom API Docs',
    favicon: '/favicon.ico' // your static favicon path
  }
});

 Meaning of Key Options :
================================== >

Option	Type	Purpose
routePrefix	string	Path to access the Swagger UI (e.g. /docs)
staticCSP	boolean	Enables Content Security Policy headers for static assets
exposeRoute	boolean	Automatically exposes the /docs route
uiConfig	object	Swagger UI configurations (explained below)
uiHooks	object	Middleware functions for handling docs request
theme	object	Customize Swagger UI title and favicon

uiConfig Details
These are passed directly to Swagger UI and are equivalent to the swaggerOptions in Express.

Option	Purpose
docExpansion	none, list, full â€“ controls how APIs expand
deepLinking	Enables direct linking to endpoints
displayRequestDuration	Shows time taken for requests
tryItOutEnabled	Enables live API calls
filter	Adds a filter input
showExtensions	Shows custom vendor extensions
showCommonExtensions	Shows common x-* extensions
persistAuthorization	Keeps token after page refresh

Why Express Setup Doesnâ€™t Use These? :
=============================================== >

Because swagger-ui-express doesn't wrap Swagger UI in the same way. In Express, you pass options like:


swaggerUi.setup(spec, {
  swaggerOptions: {
    ...
  }
});
But in Fastify, you're directly configuring the Swagger UI as a plugin, so it gives you more options upfront like theme, hooks, etc.

================================================================================================ >


 What is Swagger Central?
Swagger Central is a centralized dashboard (or web UI) where you can see all your API documentation in one place, especially useful when you have many microservices.

Itâ€™s not a library â€” itâ€™s more like a central webpage/UI that loads Swagger docs (openapi.json) from different services (auth, users, orders, etc.) and displays them together.

 Swagger Central vs Normal Swagger â€“ Simple Comparison
Feature	Normal Swagger (Per Project)	                                             Swagger Central (Multi-Service)
 Location 	  Lives inside each API project (/docs in Node, Fastify, Laravel, etc.) 	A separate UI app (like Swagger UI Docker or SwaggerHub)
 Scope	      Shows only that projectâ€™s APIs	                                      Combines APIs from many projects (Node, PHP, etc.)
âš™ Setup	    One swagger-jsdoc or @fastify/swagger setup per app	                  One Swagger UI app pulling multiple OpenAPI URLs
Maintenance	  Maintained inside appâ€™s codebase	                                    Maintained independently â€” usually via Docker or hosted portal
 Auth	       Follows appâ€™s security	                                                Can have own login or expose public docs
 Best        For	Small apps, single-service projects	                              Large, real-time apps with many microservices
 Examples	   localhost:3000/docs for one service	                                  docs.company.com shows all microservices' Swagger docs
