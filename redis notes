
resources:
..> https://blog.algomaster.io/
..> https://medium.com/redis-with-raphael-de-lio/understanding-pub-sub-in-redis-18278440c2a9


Redis-server is the process or daemon that runs in teh background and listens for client connections.
Its is tha main component of redis, responsible for storing and managing data in mempry.

what is redis-cli:
The redis commands line interface(redis-cli) is a terminal program used to send commands to and read
to read replies from teh redis server.


what redisInsifgt:
redisInsight combines a graphical user interface with Redis cCLI to let you work with any Redis deployment.

KEYS IN REDIS:
Redis keys are binary safe, this means that you can use any binary sequence as a key,from a string like 'foo'
to teh content of a JPEG file.
.> the empty string also a valid key.
.> the maximum allowed key size is 512MB.
.> key should not be very long or very short.

strings:
 Redis strings are teh most basic redis data types, representing a sequences of bystes.

lists:
Redis lists are lists of strings sorted by insertion order.

set:
Redis sets are unordered collections of unique strings that act liek the sets from python, javs etc.

sorted sets:
Redis sorted sets are collections of unique strings that maintain order by each string's associated score

hash's:
redis hashes are record types models as collections of field-value pairs.Hashes are handy to represent objects.

Strams:
A redis stream is a data structure that acts like an append-only log.
Streams help record events in teh order they occur and then syndicate them for processing.


Basic Cnfiguration Commands:

config get * - This command is used to get all config settings;
config get requirepass- This command is used to get specific config setting.
config set requirepass value- This command is used to set specific config setting.

There is also a config file etc/redis/redis.conf which can be used to get all configurations and set configurations.


redis : 
.> the main application of the redis is the  caching of the data.{ for faster recovery. }
.> session storge :  redi sis used to store teh session id , 
note: the session data in the redis will be lost when the redis server is re-started , web browser is closed.

.> redis also supports the persistent storage of teh data { permanent storege } using the snapshopt, AOF, 
IN  this case te data will be stored in to teh disk and reloaded in to the memory when aware it needed { by the event of the re-start} .

..> Distributed looks : redis acts has the automic looks 
Distributed Locks in Redis mean using Redis to make sure that when multiple computers are working together,
only one computer can access/modify a resource at a time, safely and fast.

Redis can:

#) Create a lock using a simple key (example: "lock:account123").
Set an expiration (if something goes wrong, the lock will automatically expire).
Check if lock is held before allowing work.

#) Imagine you and your friend are editing the same document at the same time.
You lock the document when you are editing.
Until you finish and unlock it, your friend cannot edit.
After you unlock, your friend can edit.
Now imagine thousands of users and many servers are trying to edit the same data.
You need a central system to manage locks — Redis is perfect for this!


.> rate limiter : redis even atcs has the rate limiter

when the user logs in then his ip will ip made to set has te key , and when user keeps, on requesting 
then his ip address will be incremented and come paried to the default  rate set inside it , allow the request to reach teh DB only teh rate limits is with in the
controls, otherwise rejects here. and here teh key also set to expire after specfic 

.> gaming Leaderboard:j


redis snapshoots  concepts:

SNAP in Redis usually means Snapshot.
(Full name = RDB Snapshot.)

..> Snapshot = Saving a copy of your Redis data into a file.
So even if the server crashes or shuts down, you won't lose your data — because Redis saved a snapshot (copy) safely.


Term	                Meaning
RDB	                  Redis Database file (example: dump.rdb)
Snapshot	            A full copy of current data saved at a specific time
Persistence	          Keeping your in-memory (RAM) data safe on disk
RDB Snapshotting	    Redis will create .rdb file (compressed) and save your data periodically


Its use cases are here :

Redis saves a .rdb file
1) This .rdb file can be loaded back later
2) Safe even if server restarts/crashes


note point:
--------------- >
.> Redis automatically saves snapshots based on rules you set in your redis.conf file.

some redis commands are :
=============================== >
Commands:
Command	What it does
SAVE	Immediately save a snapshot (synchronous, blocking)
BGSAVE	Background Save (non-blocking, Redis still working)
LASTSAVE	See the last time Redis created a snapshot
CONFIG SET save	Set the rules for automatic snapshot saving
CONFIG GET dir	See where snapshots are being saved
CONFIG GET dbfilename	See the filename of the snapshot (default: dump.rdb)

ex: 
127.0.0.1:6379> SAVE
# Blocks Redis, saves snapshot immediately

127.0.0.1:6379> BGSAVE
# Starts saving in background, Redis keeps working

127.0.0.1:6379> LASTSAVE
# Shows last snapshot time (in UNIX timestamp)


Where is the Snapshot saved?

Linux: /var/lib/redis/dump.rdb
Windows: Where your Redis server is installed (in the bin folder)
You can change this using redis.conf settings:
dir /path/to/save
dbfilename mydata.rdb


ex: scenario 
Sachin is running a Redis server.
Every 5 minutes, if at least 10 changes happen, Redis automatically saves a snapshot to dump.rdb.
Tomorrow, Sachin's server crashes suddenly.
No problem — Sachin restarts Redis, and Redis loads the last snapshot automatically!

BASIC COMMANDS:

redis-cli --version


redis.service : to restart teh server
enable redis

sudo systemctl enable redis.service

sudo systemctl disable redis

sudo systemctl start redis
sudo systemctl stop redis
sudo systemctl restart redis
sudo systemctl status redis

sido service redis status

sudo snap enable redis
sudo snap restart redis
sudo snap services.


STRINGS RELATED COMMANDS:
+++++++++++++++++++++++++++++++++++++++++++++++++

keys *
set key <value>
get key
set name sachin
get name
del key 

// making the token for teh expirations 
exists <key_name> // to check for the all existing keys here
expire roll 10 // making an key with the expires time limt.

// renaming of the keys:
set name sachin
key *
rename <key_name> <new_key_name>
rename name namedemo;

// token settings
set token <nay _token_value>
get token
expire token 20
ttl token // to see how much time it is there here for teh token expiration.

// to get the length of the keys:
keys *
get name
strlen name

//  generally the set will override the keys but to make sure not to override the keys 
// we need to use the setnx

set id 11
get id // 11
set id 222
get id // 222 { keys are overriding here }

setnx state biahr // if alread key is there then it will make sure not to  make it over written other wise it will creaate the new key 
get state // bihar


// to delete all the keys we need use the

flushall //  by using this all the keys will be deleted form the redis.

// to crete teh inline multiple keys and values we use the 

mset name raj roll 90 class 9
keys * {name,roll,class}


setex state 20 bihar
get state
ttl state

// At the time of the key creation only if we want set teh expiration then we need to use the:

psetex state 5000 telangane
get state


incrby roll 2 // increment the value of the key by one1

decrby roll 3 // decrement teh value of the key by one1

 
LIST RELATED COMMANDS:
+++++++++++++++++++++++++++++++++

.> To push the elemnst into the list
LPUSH mylist a b c
{ here the last element which we send in the mylist defination will become the first element  of the list here}

LPUSH mylist "hello"
LPUSH mylist "world"
LPUSH mylist 0-1 { assinging the keys here }

op: "hello"
"world"

LPUSH students sai
LPUSH students manoj
LRANGE students 0-1

op: manoj
sai

: here we get the elemnst from te last to first 

.> to remove the elemts froms the list:
LPOP <KEY_NAME>
LPOP students // removes the first element
LPOP studensts 2 // removes the no of elements from the list 

LLEN students // to know the lenght of the  LIST 

LINDEX students <index> // To get the elements from the specific index 
LINDEX students 2


FLUSHALL // to remove the complete list  droping of that list 


.> to pass teh multiple elements into the list we use the

LPUSHX <key_name>  1 2 3 4  // here all  elements are stored in the list 
NOTE POINT HERE : the key which we are using need to be exists here early or previously only otherwise elemenst  will not be inserted here.

.> To insert to specific position we use the 
linsert <key_name> after <element>
linsert <key_name> before <element>


.> generally in the lpush the elements are stored in the reverse order like if the 1st elemt is stored at the last position 
but to over come this we use the:

rpush <key_name> elemt1 elemt2 elemt3 ...

rpush students sai ram manu
rpop // remove th elast element from the list 



SET RELATED COMMANDS:
+++++++++++++++++++++++++++++++++
It is an un-ordered collection of elements

.> to add elemnt in the set
sadd <key_name>  sai sonu ram

.> to get the elements from teh set we use the 
smembers <key_name>

.> 
ebven we try to give the duplicate numbers , but it only saves the unique numbers;
sadd students sai ram sonu sai

.> To ge teh length of the set we use the
scard <key _name>

.> To remove the particular element from teh set we use the :
smembers <key_name> <element_name>

.> To reomve any random elemnt form the set we use the
spop <key_name>

.> To remove tghe elements from teh set randomly with the count valuse:
spop <key_name> count_value
spop usersid 2

.> To see the difference between the twonsets we use the 
sdiff <key_name1>  <key_name2>

.> To merger teh two sets we use the 
sunion <key_name1> <key_name2>

.>  To get only common elements from the two sets we use the
sinter <key_name1> <key_name2>


.> To store the result after performing the union 
sunionstore finalresult1 result1 result2
sinterstore fianlresult2 result1 result2


.> TO check wheather any element  is belongs to the set or not we use:
sismember <key_name> <element>

.> 

SORTED SET RELATED COMMANDS:
+++++++++++++++++++++++++++++++++

.> zadd <key_name> <score> <value> // To add the elements here in to the sorted set we use this.

.> zrange  <key_name> range {0-0} // To see the values 

.> zrange <key_name> range withscores // To see the scores with the values we use this 

.> to the multiple scores we use the 

zadd run 200 sachin 120 dhoni 203 virat
zrange <kwy_name> range we use this 

NOTE :here the scores are automatically sorted here based on teh score values from the low to high.


.> To find the length of the sorted set we use the:
zcard <key_name> // to get the length we use this

.>To find the scores  in between we use this
zcount <key_name> 120 300 // this will find the runs made bu th eno of persons in between these numbers here and it will print the count here 

.> To find the scores of a particular person we use this:
zscore run virat

.>  To find the index of the particular person we use the:
zrun <key_name> virat

.> To get the range of scores between the given values withscores
zrangebyscore run  150 200 withscores

.> To delete the firt scores we use this 
zrem run 



HASH RELATED COMMANDS:
+++++++++++++++++++++++++++++++++


..> To set the hsets we use this 
hset <key_name> <field> <nalue>
ex: hset users:1 name ramu class 10 rollno 101 state telangana

..> To get all teh hash set users we use this
hgetall <key_name>
hgetall users:1

..> To get teh specific fields from the hset we  use this:
hget <key_name> <field>
hget users:1 name

..> To check for teh specific field is exists are not we use this
hexists <key_name>  <field>
hexists users:1 name

if exists we get the 1
else we get teh 0

...> To modify the particular field we use the 
hset users:1 name sachin 
// if name early =sai know will be changed to the sachin

..> to avoit this kind of overwritting we use this:
hsetnx users:1 <key_name> <value>

..> To delete the particular field from the keys we have 
hdel <key_name> <field_name>
hdel users:1 subjet

..> To get all the fields from teh key we use the
hkeys <key_name>
ex: hkeys users:1

..> in teh same way to get the values we use the
hvals <key_name>
ex: hvals users:1

..> To get the comlete length of teh hash set we use the
hlen <key_name>
hlen users:1

..> 


REDIS PUB / SUB :
======================= >

..> Pub/Sub short publish /subscribe is a messaging technology that facilitates communication between different
components in a distributed system.

..> it is an Asynchronous and scalable messaging service .

..> It can be used in Real-Time messaging and chat, News updates, Alert and Notofiations, Iot devices, Load 
Balancing, Online Gaming, Live, streaming etc.


HOW PUB/SUB Works :
====================== >

.> Pub/sub is a fundamentally a simple communication model where a broker receives messages from a
publisher and distributes tham to one or more subscribes.

Type's of models:-
--------------------------- >
One to One- One publisher one subscriber.
One to Mnay - one publisher many subscriber.
Many to one - many publishers one subscriber.
Many to many - many publishers many subscribers.

Redis Pub/Sub :-

Publisher : publisher is an application or service that sends messages.
Subscriber- subscriber is an application or service that receives messages.

 Channel-Channel is the subject or the information feed.The publisher can push messages to teh channel,
which will broadcast messages to teh subscribers.

Message:- Message holds the received or transmitted data throughout the system.

Broker:Broker is responsible for guiding the messages throughout the system.
It acts as a middleman to establish and exchange communication between the publisher and subscriber.



COMMANDS:
============ >

SUBSCRIBE:It is used to subscribe the client to teh specified channels.
PUBLISH : It is used to unsubscribes the client from teh given channels, or from all them if none is given.
UNSUBSCRIBE : It is used to unsubscribes the client from the given channels, or from all of them if none is given.
PSUBSCRIBE-It is used to subscribes the client to the given patterns.

PUBSUB CAHNNELS: It is used to list the currently active channels.

PUBSUB NUMSUM: It return the number of subscribes for teh specified channels.

PUNSUBSCRIBE :- It is used to unsubscribe the client from teh given patterns, or from all of them 
if none is given.


HOW TO CONNECT HERE:

.> CONNECT TO THE REDIS 3-4 DIFFERENT CLIENT USING THE REDIS CLI'S:

IN ONE OF THE CLIENT ENTER THIS COMMANDS HERE:
.> SUBSCRIBE { NEW_CHANNEL _NAME}

IN ONE OF TEH CLIENT ENTER THIS COMMANDS HERE 
.> PUBLISH <Channel names> " HELLO"

YOU CAN SEE THE MESSAGES IN THE OTHER END AT TEH SUBSCRIBER END HERE THE MESSAGE WHICH ARE PUBLISHED BY TEH 
PERSONS

.> 

SUBSCRIBING THE PATTERN MATCHING CHANNELS:


..> INTER THIS IN ANY ONE OF THE CLIENT'S SIDE:

PSUBSCRIBE GEEK* 

..> IN ANOTHER CLIENT SIDE WE CAN SEE THE  WHICH WE ARE SENDING BELOW MESSAGE" 
PUBLISH GEEKYSHOWS "HELLO FROM THE MESSAGES"


..> TO SEE HOW MANY PEOPLE ARE SUBSCRIBED TO THIS CHANNEL WE CAN USE THE:
PUBSUB NUMSUB <channel_name>

..> to set teh active channel we use the:
pubsub channels;

=============================================================================================================================
==============================================================================================================================
=================================================================================================================================
=============================================================================================================================


Redis Persistence :-
Persistence refers to the writing of data to durble storage, such as a solid-state disk(SSD).
Redis provides a range os persistence options. These include:
1) NO persistence
2) RDB ( Redis Database File) 
3) AOF ( Append Only File)
4) RDB+AOF 


NO PERSISTENCE:
--------------------------------------------------------- >
-------------------- >
-> You can diable persistence completely.This is somtimes used when caching.
-> 




DEMO :Set the two  keys with the names to check the data persistence or not.
set name1 sai
set name2 sachin

exit 
restart redis-server
redis-cli
keys *
<here we  get the data  keys > 

Because: redis will provide the RDB data persisntence.

DEMO :-> SO TO MAKE THE REDIS IN PERSISTENCE:

In  the command prompt go up to /redis
cd/etc/redis
ls
redis.config

open this file 

sudo nano redis.config
cont+w
snapshoooting

in the fiel we have the in this way:
# save ""

...> just make sure to do the uncomment this one.
next press
cont+x
cont+y
enter

...> re start teh server:
restart redis-server
redis cli


..> enter the data or just set teh keys here

set name1 sai
set name2 sachin
keys* 

exit 

redis-cli
keys* 
--> we can see teh redis keys here  { because here teh server is not restarted here}



restart redis-server
redis-cli
keys*
..> Here we can not see the data here because we restarted teh server then al teh data is gone from teh 
redis cache .

TO MAKE THE PERSISTENCE WE HAVE TEH 3 METHODS  :-
---------------------------------------------------------------------------- >
1) REDIS DATABASE (RDB) :- 

RDB persistence performs point-in -time snapshots of your dataset at specified intervals.

By default redis save snapshots of the dataset on disk, in a binary file called dump.rdb.

You can configure Redis to have it save the dataset every N seconds if there are at least M keys changes 
in teh dataset, or you can manually call teh SAVE or BGSAVE commands .
This strategy is know sa snapshotting.

ex:
save 3600 1 { here in the 3600 seconds if there is a change in the one key then it will save the snapshoot here}


In order to make the snapshooting we need to have the 
save option in enable mode:

go to the redis file,
open the redis file,
cont+w
snahoot

have this in the file:
# save ""

.> in done you can see the  this in the congif file :

save 3600 1 ,300 100 ,60 10000
     tp   kc,tp   kc , tp   kc

tp= time period range{ with in teh time}
kc= key changes

cont+x
cont+y
enter
restart redis-server
redis-cli

To see the what config we have kept here in teh config file we need to use this:
config get save

here the data is saved in to the dump.rdb file  
it is location we  can see in teh redis-config file

/var/lib/redis
dump.rdb

2) Append Only File (AOF) :
---------------------------------------------- >



AOF persistence logs every write operation received by the server.
These operations can then be replayed again at server startup, Reconstructing the original dataset.

.> when ever an write  operation it will get then only a log file is saved in to the data base.

.> Snashotting is not very durable,If your computer running redis stops,your power line fails, or you 
accidentally kill-9 instance, the latest data written to redis will be lost.

.> so this si snot sutaible for some applications, so the append-only file is an alternative,
fully-durable strategy for redis.

Append Only File :-

.> You can turm on the AOF in your configuration file:
appendonly yes

Every time redis receives a command that changes the dataset (e.g SET) it will appemd it to the AOF.
When you restart Redis it will re-play the AOF to rebuild teh State.


.> First go in to the redis config file
disabel the configuation file here
# save 3600 1 300 100 60 100000

.> In the config file go to the { append only mode } 
we can see this 
appendonly no
change this to the
appendonly yes

cont+x
cont+y
enter
restart redis-server

..> to check whaether the append file is created or not we need to use the

go to the

cd /var/lib/redis
ls
// here we can see the files here

set name1 sai
set name2 sachin
keys *
exit 
restart redis-server
redis-cli
keys * 
.> here we can see our data { which is coming from the AOF files }

cd /var/lib/redis
 ls 
you can see the append file here
just go into the 
cd appendonlydir/
 ls
we can see here .rdb files and .aof files 
so into the .aof files and see the data there
cat appendonly.aof.1.incr.aof


=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
Redis Cluster :


..> It is silimar to the master and slave .

..> Redis sclaes horizontally with a deployment topology called Redis cluster.

..> redis scales horizontally with the multiple servers

..> Redis Cluster provides a way to run a redis installation where data is automatically shred across 
multiple redis nodes.

..> Redis cluster automatically splits your dataset among multiple nodes.

..> It continues operations when a subset of the nodes are experiencing failures or unable to communicate
with the rest of the cluster.

..> Redis cluster does not use consistent hashing, but uses a different foem of the sharding.

..>  Normal master slave structure:L

Master {Redis +sentinel}
|
|
> Slave 1                Slave 2                  Slave 3
redis + Sentinel      redis + sentinel         redis + sentinel   

.> here we have the one master and many slaves ,  { all read and write operations occure on the master only }
.> and the data which is stored on the master will be saved or copied in to the slaves simultaneosully.
.> when master is dead , then from the slaves any one will become the master.

.> but redis something different here:

..> In redis there will be multiple masters and we have the multiple slaves corresponding to that master.

..>  Read the redis scaling with the horizontal.

To run the redis cluster we need to hve teh 6 folders  3 for master and 3 for teh slaves.



create a floder and move in to that floder :

mkdir 7000 7001 7002 7003 7004 7005
ls

...> next we need to create a file in each of these directories with the name redis.conf

.> nano redis.conf
write these in side that folder :
port 7000
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
appendonly yes

clt+x
clt+y
enter

 cp redis.conf 7000/redis.conf
cd 7000
ls
>we can see the redis.conf file here inside it.
cat redis.conf

In the same way we need to copy the redis conf in all the files.

cp redis.conf 7001/redis.conf
cp redis.conf 7002/redis.conf
cp redis.conf 7003/redis.conf
cp redis.conf 7004/redis.conf
cp redis.conf 7005/redis.conf

NOTE here we copied this content in all these file sbut need to need ton chaneg ethe port number accordinly 
for teh files :
..............................> 

go inside the 7002:
nano redis.conf

port 7000
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
appendonly yes 

Know we just created the nodes  but  need to start the servers in side that nodes:

go inside the 7000

redis-server ./redis.conf

know open a new ternimal and 

go previsoly from where you runned the redis,

go inside the cd 7001
redis-server ./redis.conf


In the same way need to go inside the all the nodes and start the srevers.

go previsoly from where you runned the redis,
go inside the cd 7001
redis-server ./redis.conf

for all the nodes like 7002, 7003, 7004, 7005


.....> after all set up , open a new terminal for working purpose 
here we need to create teh cluster 
enter this command :

redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 \
127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 \
--cluster-replicas 1

enter teh yes

know opone the a cluster here:
redis-cli -c -p 7000
cluster slots { to see the slots here }

to see the cluster information we enter this :
#cluster info

 set key1 sachin 
get key1


here to see the master  information we need to enter this :

exit 
redis-cli -p 7000 cluster nodes | grep master


to see the nodes we need to enter this :
redis-cli  -p cluster nodes


To see if any master is down then what heppens here like wheather the slave will be become the
master or not.

> open the termial where we are runnig  the server any 
stop it by cont+c

and come to the server where we operating
redis-cli -p 7000 cluster nodes | grep master
redis-cli  -p cluster nodes




=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
Redis Access Control List :

.>  Its limits the use authtication , and provides someset of rules to access the data here.

.> it only provied access to the users how  provide the passwords and authtication, they only able to work 
on the cli 

.> we can provide the security here by limiting the user access to data 

.>  ACL list { it will give all the details here about the users details here }
how logged in and the names , wheather they are active or not 
* user default on nopass ~* ,, ,, 

.> Default : { usersname}
.> on : user is active
.> off : user is in active
.>nopass :{ which means user is active so ot required no password has off know here}

.>  ~* :{ this indicates the user is allowed to access all the keys here }

.> &* :{ this indicates here that user to allowed to acces the pub/sub}

.> *@all :{ this indictaed here that user is allowed to access the every command here}



ACL GETUSER default :
..> by using this commnad we get all the users info here.
..> 

redis cli
acl list
.> here we cn see the all teh user info here.

acl whoami:
..> to so which user is logged in here

acl getuser <user_name>
.> by this commad we can see all teh information about the usere here.


To create teh new user we have here:
acl setuser <user_name> on >{password} allcommands allkeys
. here allkeys is teh als name for the allcommands

.> to see whaether the user is created or not we can do this has 
acl list

.> to lohin with this user name we need to do here has :
auth <user_name> <password>

.> acl whoami
< To see teh current user login information. >

.> to make this user limited acces we need to use here has:
acl setuser <user_name> on <password>  nocommands -set +get
.> this commands describes here that he can only access the get commands but not the set commands here

to test purpose use this commands here:
acl list {we get teh error 
keys* { we get teh erro
set city hyf { we get teh erro
get <any_key_name> { we do not get any erro


To delet the user we need to use this command here:

acl list
..> we get all teh user info here

acl deluser <user_name>


.> to generate a new password for teh user
.> login with teh user name
.> acl genpass
# we get here new passowrd here



DIFFERENT CACHING STRATEGIES  explanation :
------------------------------------------------------------------------------------------------------------------------------ >

..> Caching means temporarily storing a copy of data so that future requests for that data can be served faster 
without fetching it again from the original source (like database, API, or server).


1. Cache Aside (Lazy Loading)
Idea: Only load into the cache when needed.

How it works:
App first checks the cache.
If the data is in the cache → return it.
If not → fetch from DB, store it in cache, and return it.

Pros:
Reduces memory usage (only needed data is cached).
Always fresh after write.

Cons:
First request is slow (DB fetch happens).

Diagram:
Request -> Cache Hit -> Return Data
Request -> Cache Miss -> Fetch from DB -> Save to Cache -> Return Data

------------------------------------------------------------------------------------------------

2. Write Through
Idea: Write to the cache and the database at the same time.

How it works:
When you update or insert data → first update cache, then update DB.

Diagram:
Write Request -> Cache + Database

Pros:
Cache always has the latest data.

Cons:
Write operations are slower (because both cache and DB must be updated).

------------------------------------------------------------------------------------------------

3. Write Back (Write Behind)
Idea: Write to cache only first, then asynchronously update the database later.

How it works:
Update cache immediately.
Batch update or delayed update to the database.

Diagram:
Write Request -> Cache
Later -> Cache flushes to Database

Pros:
Very fast writes.

Cons:
Risk of data loss if cache crashes before flushing to DB.

-----------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

4. Read Through
Idea: Application never directly talks to DB. Cache itself fetches from DB on a miss.

How it works:
If data is in cache → return.
If not, cache itself fetches from DB and returns.

Diagram:
Request -> Cache (fetch if needed) -> Return Data

Pros:
Easy for the app — it just talks to the cache.

Cons:
Cache component becomes more complex (it must know how to fetch from DB).

-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------

5. Refresh Ahead (Auto Refresh)
Idea: Predict data expiration and refresh it before it expires.

How it works:
If you know data expires after 5 mins, the cache refreshes it at 4:30 mins.

Diagram:
Timer/Background Job -> Cache Refresh

Pros:
Almost zero cache misses.

Cons:
Can waste resources if data isn't actually needed again.


-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
