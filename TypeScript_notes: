
TYPESCRIPT NOTES:
-------------------- >

TypeScript is JavaScript with added syntax for types.

This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types.

TypeScript allows specifying the types of data being passed around within the code, and has the ability to report errors when the types don't match.

TypeScript will report an error when passing a string into a function that expects a number. JavaScript will not.

Within your npm project, run the following command to install the compiler:

npm install typescript --save-dev

The compiler is installed in the node_modules directory and can be run with: npx tsc.

npx tsc
Which should give you an output similar to:

Version 4.5.5
tsc: The TypeScript Compiler - Version 4.5.5

By default the TypeScript compiler will print a help message when run in an empty project.
The compiler can be configured using a tsconfig.json file.

You can have TypeScript create tsconfig.json with the recommended settings with:
npx tsc --init


boolean - true or false values
number - whole numbers and floating point values
string - text values like "TypeScript Rocks"
There are also 2 less common primitives used in later versions of Javascript and TypeScript.

bigint - whole numbers and floating point values, but allows larger negative and positive numbers than the number type.
symbol are used to create a globally unique identifier.

Type Assignment :
When creating a variable, there are two main ways TypeScript assigns a type:

Explicit : we need to define the type of the variable.
let firstName: string = "Dylan"; // type string
console.log(typeof firstName);

let varib:string ="dinnu";
console.log(varib)



Implicit : Here in this case typescript will guess teh type here in this case:
const sa="sachin"
console.log(sa)
console.log(typeof sa)



Note: Having TypeScript "guess" the type of a value is called infer.
Implicit assignment forces TypeScript to infer the value.


let firstName: string = "Dylan"; // type string
firstName = 33; // attempts to re-assign the value to a different type  we get teh error here in thiscase

..> TypeScript may not always properly infer what the type of a variable may be. In such cases, it will set the type to any which disables type checking.


we have an option in the tsconfig.ts file to follw the strict type orimplicity type.
This behavior can be disabled by enabling noImplicitAny as an option in a TypeScript's project tsconfig.json. That is a JSON config file for customizing how some of TypeScript behaves.



The special Types in TypeScript:
TypeScript has special types that may not refer to any specific type of data.

1) Type: any
any is a type that disables type checking and effectively allows all types to be used.

The example below does not use any and will throw an error:

EX: let u = true;
u = "string"; // Error: Type 'string' is not assignable to type 'boolean'.
Math.round(u); // Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.
We get Error here in this case .


EX-2:
let v: any = true;
v = "string"; // no error as it can be "any" type
Math.round(v); // no error as it can be "any" type

2) Type: unknown
unknown is a similar, but safer alternative to any.
TypeScript will prevent unknown types from being used,

unknown is best used when you don't know the type of data being typed. To add a type later, you'll need to cast it.
Casting is when we use the "as" keyword to say property or variable is of the casted type.


Difference Between any and unknown in TypeScript
Feature	any	unknown
Type Safety	       ❌ Unsafe – disables type checking	✅ Safe – forces type checking
Assignability	     Can be assigned to any other type	Cannot be assigned to other types without type checking
Purpose          	Used when you don't care about the type	Used when you don't know the type yet
Type Inference	 Treated like an escape hatch	Treated like a type that must be checked
Recommendation	❌ Should be avoided in most cases	✅ Safer and better alternative to any


any Example (Unsafe)
-------------------------- >

let value: any;
value = 10;
value = "Hello";
value = { name: "Sachin" };

let str: string = value; // No error, but unsafe
console.log(str.toUpperCase()); // May fail at runtime if value is not a string


TypeScript import and export – Syntax & Example
Exporting Code
There are two main ways to export in TypeScript:


1. Named Exports
You can export multiple things from a file.

// mathUtils.ts
export const PI = 3.14;
export function add(a: number, b: number): number {
  return a + b;
}
export type User = { name: string; age: number };

2. Default Export
You can export one thing as the default.

// logger.ts
export default function log(message: string) {
  console.log("Log:", message);
}


Importing Code
 1. Named Imports
Import specific exports from a module.
import { PI, add, User } from './mathUtils';
console.log(add(10, 20)); // 30

 2. Default Import
Import the default export.
import log from './logger';
log("Hello, TypeScript!");

 3. Mixed Import
When a module has both default and named exports:
import log, { PI } from './mathUtilsWithDefault';

// utils/math.ts
export const PI = 3.14159;
export function add(x: number, y: number): number {
  return x + y;
}

// utils/logger.ts
export default function log(message: string): void {
  console.log("[LOG]:", message);
}

Never in typescript:
---------------------------- >

never means "this should never happen."
It’s not the same as void (which means "returns nothing").

never in TypeScript – Simple Explanation
The never type represents a value that never occurs. It is used when:
A function never returns (e.g., it throws an error or has an infinite loop).
A variable is guaranteed to never have a value.

let x: never = true;  error 
let x: never = false; error  


Type: undefined & null
---------------------------------- >
undefined and null are types that refer to the JavaScript primitives undefined and null respectively.

let y: undefined = undefined;
let z: null = null;

ex:
These types don't have much use unless strictNullChecks is enabled in the tsconfig.json file.


TYPESCRIPT FUNCTIONS :
-------------------------- >
.> TypeScript has a specific syntax for typing function parameters and return values.

ex:
// the `: number` here specifies that this function returns a number
function getTime(): number {
  return new Date().getTime();
}

.> If no return type is defined, TypeScript will attempt to infer it through the types of the variables or expressions returned.

Void Return Type
The type void can be used to indicate a function doesn't return any value.

ex:
function printHello(): void {
  console.log('Hello!');
}

Parameters
Function parameters are typed with a similar syntax as variable declarations.

function multiply(a: number, b: number) {
  return a * b;
}

NOTE:  If no parameter type is defined, TypeScript will default to using any.

Optional Parameters :
..> By default TypeScript will assume all parameters are required, but they can be explicitly marked as optional.

function add(a:number, b:number, c?:number ){
return a+b+(c||0) ;
}

Default Parameters :
For parameters with default values, the default value goes after the type annotation:

function pow(value: number, exponent: number = 10) {
  return value ** exponent;
}

NOTE: TypeScript can also infer the type from the default value.

Rest Parameters :
Rest parameters can be typed like normal parameters, but the type must be an array as rest parameters are always arrays.

Example
function add(a: number, b: number, ...rest: number[]) {
  return a + b + rest.reduce((p, c) => p + c, 0);
}


==========================================================================================================================================================================================================================================================================================
// Imports rewritten with TypeScript module syntax
import swaggerJsdoc, { Options } from "swagger-jsdoc";
import swaggerUi from "swagger-ui-express";
import path from "path";
import { fileURLToPath } from "url";
import { Express } from "express";

// Properly resolving __dirname in an ES module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Exported function with explicit type annotations
export default function setupSwagger(app: Express): void {
  const swaggerDefinition = {
    openapi: "3.0.0",
    info: {
      title: "EVENT MANAGEMENT ROLE-BASED API",
      description:
        "API Documentation for User Authentication and Event Management System",
      version: "1.0.0",
    },
    servers: [
      {
        url: "http://localhost:3033",
        description: "Local Server",
      },
    ],
    tags: [
      {
        name: "FOR REGISTRATION/LOGIN/LOGOUT",
        description:
          "Endpoints for the user/admin registration, login, logout, and forgot password",
      },
      {
        name: "EVENT-MANAGEMENT-ADMIN",
        description: "Admin endpoints for managing events",
      },
      {
        name: "BOOKING-USER",
        description: "User endpoints for booking events",
      },
      { name: "GENERAL OPERATIONS", description: "General info routes" },
      { name: "DEMO ROUTES", description: "Demo routes" },
    ],
    components: {
      securitySchemes: {
        BearerAuth: {
          type: "apiKey",
          name: "Authorization",
          in: "header",
          description: 'Enter JWT token as "Bearer <token>"',
        },
      },
    },
  };

  // Adding type safety to Swagger options using swagger-jsdoc's Options type
  const swaggerOptions: Options = {
    swaggerDefinition,
    apis: [
      path.resolve(__dirname, "../routes/v1/authroutes.ts"),
      path.resolve(__dirname, "../routes/v1/eventroutes.ts"),
      path.resolve(__dirname, "../routes/v1/BookingsRoutes.ts"),
      path.resolve(__dirname, "../routes/v1/generalroutes.ts"),
    ],
  };

  const swaggerDocs = swaggerJsdoc(swaggerOptions);

  // Applying middleware to the Express app with type-safe setup
  app.use(
    "/docs",
    swaggerUi.serve,
    swaggerUi.setup(swaggerDocs, {
      explorer: true,
      swaggerOptions: {
        docExpansion: "list",
        deepLinking: true,
        displayRequestDuration: true,
        examples: true,
      },
    })
  );

  console.log("Swagger docs available at http://localhost:3033/docs");
}

changes for this :
=================== >

Changes Explained:
#	Change	Reason
1	import swaggerJsdoc, { Options } from "swagger-jsdoc"	In TypeScript, we import types explicitly to ensure strong typing (Options helps ensure the swaggerOptions object follows Swagger structure).
2	import { Express } from "express"	We need the Express type to annotate the app parameter, giving better IntelliSense and type checking.
3	function setupSwagger(app: Express): void	Declares this function takes an Express app and returns void, helping catch any misuses or return errors.
4	Changed .js to .ts in apis array	TypeScript project files should reference .ts extensions to ensure correct documentation generation.
5	Added swaggerOptions: Options	This gives the Swagger options object full type safety, preventing misconfiguration.
6	Used const __filename and __dirname using fileURLToPath()	This is required for ES Modules in TypeScript, as __dirname is not natively available.


Make sure this in the tsconfig.js :
--------------------------------------------- >

Make sure your tsconfig.json includes:

json
Copy
Edit
{
  "compilerOptions": {
    "module": "ESNext",
    "target": "ES2020",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "outDir": "./dist",
    "strict": true,
    "baseUrl": "./",
    "types": ["node"]
  }
}
Also ensure type: "module" is set in your package.json to support import.meta.url.
