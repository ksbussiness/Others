
TYPESCRIPT NOTES:
-------------------- >

TypeScript is JavaScript with added syntax for types.

This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types.

TypeScript allows specifying the types of data being passed around within the code, and has the ability to report errors when the types don't match.

TypeScript will report an error when passing a string into a function that expects a number. JavaScript will not.

Within your npm project, run the following command to install the compiler:

npm install typescript --save-dev

The compiler is installed in the node_modules directory and can be run with: npx tsc.

npx tsc
Which should give you an output similar to:

Version 4.5.5
tsc: The TypeScript Compiler - Version 4.5.5

By default the TypeScript compiler will print a help message when run in an empty project.
The compiler can be configured using a tsconfig.json file.

You can have TypeScript create tsconfig.json with the recommended settings with:
npx tsc --init


boolean - true or false values
number - whole numbers and floating point values
string - text values like "TypeScript Rocks"
There are also 2 less common primitives used in later versions of Javascript and TypeScript.

bigint - whole numbers and floating point values, but allows larger negative and positive numbers than the number type.
symbol are used to create a globally unique identifier.

Type Assignment :
When creating a variable, there are two main ways TypeScript assigns a type:

Explicit
Implicit
In both examples below firstName is of type string






// Imports rewritten with TypeScript module syntax
import swaggerJsdoc, { Options } from "swagger-jsdoc";
import swaggerUi from "swagger-ui-express";
import path from "path";
import { fileURLToPath } from "url";
import { Express } from "express";

// Properly resolving __dirname in an ES module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Exported function with explicit type annotations
export default function setupSwagger(app: Express): void {
  const swaggerDefinition = {
    openapi: "3.0.0",
    info: {
      title: "EVENT MANAGEMENT ROLE-BASED API",
      description:
        "API Documentation for User Authentication and Event Management System",
      version: "1.0.0",
    },
    servers: [
      {
        url: "http://localhost:3033",
        description: "Local Server",
      },
    ],
    tags: [
      {
        name: "FOR REGISTRATION/LOGIN/LOGOUT",
        description:
          "Endpoints for the user/admin registration, login, logout, and forgot password",
      },
      {
        name: "EVENT-MANAGEMENT-ADMIN",
        description: "Admin endpoints for managing events",
      },
      {
        name: "BOOKING-USER",
        description: "User endpoints for booking events",
      },
      { name: "GENERAL OPERATIONS", description: "General info routes" },
      { name: "DEMO ROUTES", description: "Demo routes" },
    ],
    components: {
      securitySchemes: {
        BearerAuth: {
          type: "apiKey",
          name: "Authorization",
          in: "header",
          description: 'Enter JWT token as "Bearer <token>"',
        },
      },
    },
  };

  // Adding type safety to Swagger options using swagger-jsdoc's Options type
  const swaggerOptions: Options = {
    swaggerDefinition,
    apis: [
      path.resolve(__dirname, "../routes/v1/authroutes.ts"),
      path.resolve(__dirname, "../routes/v1/eventroutes.ts"),
      path.resolve(__dirname, "../routes/v1/BookingsRoutes.ts"),
      path.resolve(__dirname, "../routes/v1/generalroutes.ts"),
    ],
  };

  const swaggerDocs = swaggerJsdoc(swaggerOptions);

  // Applying middleware to the Express app with type-safe setup
  app.use(
    "/docs",
    swaggerUi.serve,
    swaggerUi.setup(swaggerDocs, {
      explorer: true,
      swaggerOptions: {
        docExpansion: "list",
        deepLinking: true,
        displayRequestDuration: true,
        examples: true,
      },
    })
  );

  console.log("Swagger docs available at http://localhost:3033/docs");
}

changes for this :
=================== >

Changes Explained:
#	Change	Reason
1	import swaggerJsdoc, { Options } from "swagger-jsdoc"	In TypeScript, we import types explicitly to ensure strong typing (Options helps ensure the swaggerOptions object follows Swagger structure).
2	import { Express } from "express"	We need the Express type to annotate the app parameter, giving better IntelliSense and type checking.
3	function setupSwagger(app: Express): void	Declares this function takes an Express app and returns void, helping catch any misuses or return errors.
4	Changed .js to .ts in apis array	TypeScript project files should reference .ts extensions to ensure correct documentation generation.
5	Added swaggerOptions: Options	This gives the Swagger options object full type safety, preventing misconfiguration.
6	Used const __filename and __dirname using fileURLToPath()	This is required for ES Modules in TypeScript, as __dirname is not natively available.


Make sure this in the tsconfig.js :
--------------------------------------------- >

Make sure your tsconfig.json includes:

json
Copy
Edit
{
  "compilerOptions": {
    "module": "ESNext",
    "target": "ES2020",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "outDir": "./dist",
    "strict": true,
    "baseUrl": "./",
    "types": ["node"]
  }
}
Also ensure type: "module" is set in your package.json to support import.meta.url.
