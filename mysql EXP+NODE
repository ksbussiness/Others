DB.JS connection:

const mysql = require('mysql2');

const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '', // your MySQL password
    database: 'UserDB'
});

connection.connect((err) => {
    if (err) throw err;
    console.log('âœ… Connected to MySQL');
});

module.exports = connection;

---------------------------------------------- >
Way of importing it in the every model 
way one :

const db = require('../db');

const insertUser = (username, email, cb) => {
    db.query('INSERT INTO users (username, email) VALUES (?, ?)', [username, email], cb);
};

module.exports = { insertUser };

---------------------------------------------- >
SERVER .JS or APP.js file setup:

const express = require('express');
const db = require('./db');
const bodyParser = require('body-parser');

const userRoutes = require('./routes/userRoutes');
const productRoutes = require('./routes/productRoutes');
const orderRoutes = require('./routes/orderRoutes');

// Inject db into each model once
require('./models/userModel').setDB(db);
require('./models/productModel').setDB(db);
require('./models/orderModel').setDB(db);

const app = express();

app.use(bodyParser.json());

app.use('/api/users', userRoutes);
app.use('/api/products', productRoutes);
app.use('/api/orders', orderRoutes);

app.listen(3000, () => {
    console.log('ðŸš€ Server running at http://localhost:3000');
});

=--------------------------------========================================================== >
different models setup :


models/userModel.js

let db;
function setDB(connection) { db = connection; }

const insertUser = (username, email, cb) => {
    db.query('INSERT INTO users (username, email) VALUES (?, ?)', [username, email], cb);
};

module.exports = { setDB, insertUser };
----------->
 models/productModel.js

let db;
function setDB(connection) { db = connection; }

const getAllProducts = (cb) => {
    db.query('SELECT * FROM products', cb);
};

module.exports = { setDB, getAllProducts };
-------------------->

models/orderModel.js

let db;
function setDB(connection) { db = connection; }

const placeOrder = (userId, productId, quantity, cb) => {
    db.query('INSERT INTO orders (user_id, product_id, quantity) VALUES (?, ?, ?)', 
             [userId, productId, quantity], cb);
};

module.exports = { setDB, placeOrder };

...> VALUES (?, ?, ?): The ? placeholders are used to safely insert the actual values (to prevent SQL injection attacks). 
The values for these placeholders will be provided through the second argument passed to db.query.

The Values Array ([userId, productId, quantity]):

This array contains the actual values to be inserted into the query. Here, the values userId, productId, and quantity are passed from the calling code, usually coming from the request body in the API.

This array corresponds to the placeholders (?) in the SQL query.

userId will replace the first ? in the SQL query (user_id column).

productId will replace the second ? (product_id column).

quantity will replace the third ? (quantity column).



..> The Callback Function (cb):

The callback function (cb) is passed as the last argument in the db.query method.

Callback functions are used to handle asynchronous operations. Once the query is executed (either successfully or with an error), this function will be triggered with two parameters:

Error: The first parameter is the error (if any) that occurred during the database operation.

Results: The second parameter contains the results of the query.


-----------------------------------------------------------------===================================================== >
router file :

routes/userRoutes.js â€“ Register Route

const express = require('express');
const router = express.Router();
const { registerUser } = require('../controllers/userController');

router.post('/register', registerUser);

module.exports = router;

-----------------------------------------------------------------===================================================== >
Controller logic:


controllers/userController.js â€“ Business Logic

const userModel = require('../models/userModel');

const registerUser = (req, res) => {
    const { username, email } = req.body;

    userModel.findUserByUsername(username, (err, results) => {
        if (err) return res.status(500).json({ error: 'DB error' });

        if (results.length > 0) {
            return res.status(400).json({ message: 'Username already exists' });
        }

        userModel.insertUser(username, email, (err, result) => {
            if (err) return res.status(500).json({ error: 'DB error' });

            res.status(201).json({ message: 'User registered successfully' });
        });
    });
};

module.exports = { registerUser };
================================================================================================================================= >

..> In JavaScript, functions can be exported from a module and used anywhere the module is imported. So when you do something like this.

let db;

// Arrow function to set DB connection
const setDB = (connection) => {
    db = connection;  // Store the DB connection here
};

const insertUser = (username, email, cb) => {
    db.query('INSERT INTO users (username, email) VALUES (?, ?)', [username, email], cb);
};

module.exports = { setDB, insertUser };
=================================================================================================================================== >

import { UserModel } from '../models/userModel.js';  // Importing the model

// Exporting the async controller function using `export const`
export const userController = async (req, res) => {
    try {
        const { username, email } = req.body;  // Extracting data from request body

        // Call the model's function to insert the user into DB
        const result = await UserModel.insertUser(username, email);

        // Send the response back to the client
        res.status(200).json({
            message: 'User registered successfully',
            result
        });
    } catch (error) {
        console.error('Error during user registration:', error);

        // Handling errors in the catch block
        res.status(500).json({
            message: 'Error occurred during registration',
            error: error.message
        });
    }
};

========================================================================================== >

